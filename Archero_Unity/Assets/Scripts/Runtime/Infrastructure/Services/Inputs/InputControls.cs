//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/GameSettings/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Tallaks.ArcheroTest.Runtime.Infrastructure.Inputs
{
    public partial class @InputControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""567d959c-7ecb-4989-8644-c94b640ffc36"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f8729277-06e3-45a3-b6f0-391860b194bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeltaPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b9464834-3804-4c6b-8946-748b083703fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementStop"",
                    ""type"": ""Button"",
                    ""id"": ""07e73a4d-5a42-481d-9d15-1901897fa815"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""002bd3b0-7f0d-4a71-b036-390e4b995fd3"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a141f58e-5d02-4a0a-aacf-0c0f19f1b647"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeltaPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c60ed3e-f7ce-4c74-8fcb-8ba2a7867ddf"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementStop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Editor"",
            ""bindingGroup"": ""Editor"",
            ""devices"": []
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_PointerPosition = m_Gameplay.FindAction("PointerPosition", throwIfNotFound: true);
            m_Gameplay_DeltaPosition = m_Gameplay.FindAction("DeltaPosition", throwIfNotFound: true);
            m_Gameplay_MovementStop = m_Gameplay.FindAction("MovementStop", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_PointerPosition;
        private readonly InputAction m_Gameplay_DeltaPosition;
        private readonly InputAction m_Gameplay_MovementStop;
        public struct GameplayActions
        {
            private @InputControls m_Wrapper;
            public GameplayActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerPosition => m_Wrapper.m_Gameplay_PointerPosition;
            public InputAction @DeltaPosition => m_Wrapper.m_Gameplay_DeltaPosition;
            public InputAction @MovementStop => m_Wrapper.m_Gameplay_MovementStop;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @PointerPosition.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPointerPosition;
                    @PointerPosition.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPointerPosition;
                    @DeltaPosition.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDeltaPosition;
                    @DeltaPosition.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDeltaPosition;
                    @DeltaPosition.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDeltaPosition;
                    @MovementStop.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementStop;
                    @MovementStop.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementStop;
                    @MovementStop.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovementStop;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PointerPosition.started += instance.OnPointerPosition;
                    @PointerPosition.performed += instance.OnPointerPosition;
                    @PointerPosition.canceled += instance.OnPointerPosition;
                    @DeltaPosition.started += instance.OnDeltaPosition;
                    @DeltaPosition.performed += instance.OnDeltaPosition;
                    @DeltaPosition.canceled += instance.OnDeltaPosition;
                    @MovementStop.started += instance.OnMovementStop;
                    @MovementStop.performed += instance.OnMovementStop;
                    @MovementStop.canceled += instance.OnMovementStop;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);
        private int m_TouchscreenSchemeIndex = -1;
        public InputControlScheme TouchscreenScheme
        {
            get
            {
                if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
                return asset.controlSchemes[m_TouchscreenSchemeIndex];
            }
        }
        private int m_EditorSchemeIndex = -1;
        public InputControlScheme EditorScheme
        {
            get
            {
                if (m_EditorSchemeIndex == -1) m_EditorSchemeIndex = asset.FindControlSchemeIndex("Editor");
                return asset.controlSchemes[m_EditorSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnDeltaPosition(InputAction.CallbackContext context);
            void OnMovementStop(InputAction.CallbackContext context);
        }
    }
}
